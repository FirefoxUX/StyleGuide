"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var quotes = ["\"", "'"];

/**
 * Find the index of a character within a declaration value.
 *
 * @param {object} options
 * @param {string} options.value - The value to look through
 * @param {string|string[]} options.char - The target of the search. Can be
 *   a single character, a string with some length, or an array of single-character
 *   targets, all of which count as a match
 * @param {boolean} [options.insideFunction] - If `true`, only will report
 *   `char` found inside a function
 * @param {boolean} [options.outsideFunction] - If `true`, only will report
 *   `char` found outside functions
 * @param {boolean} [onlyOne] - Stop looking after the first match is found
 * @param {function} callback - Function that takes the index of `char` or
 *   `undefined` if `char` is not found
 * @return {undefined}
 */

exports["default"] = function (options, callback) {
  var value = options.value;
  var char = options.char;
  var insideFunction = options.insideFunction;
  var outsideFunction = options.outsideFunction;

  var isInsideString = false;
  var isInsideFunction = false;
  var openingQuote = undefined;
  var openingParenCount = 0;
  var count = 0;

  var targetIsArray = Array.isArray(char);
  var targetLength = char.length;

  function matchesTarget(toBeChecked) {
    if (targetIsArray) {
      return char.indexOf(toBeChecked) !== -1;
    }
    return toBeChecked === char;
  }

  for (var i = 0, l = value.length; i < l; i++) {
    var currentChar = value[i];
    if (!isInsideString && quotes.indexOf(currentChar) !== -1) {
      if (value[i - 1] === "\\") {
        continue;
      }
      openingQuote = currentChar;
      isInsideString = true;

      // For string-quotes rule
      if (matchesTarget(currentChar)) {
        matchFound(i);
      }
      continue;
    }
    if (isInsideString && currentChar === openingQuote) {
      if (value[i - 1] === "\\") {
        continue;
      }
      isInsideString = false;
      continue;
    }
    if (insideFunction || outsideFunction) {
      if (!isInsideString && currentChar === "(") {
        openingParenCount++;
        isInsideFunction = true;
        continue;
      }
      if (!isInsideString && currentChar === ")") {
        openingParenCount--;
        if (openingParenCount === 0) {
          isInsideFunction = false;
        }
        continue;
      }
      if (!isInsideString && /^[a-zA-Z]*\(/.test(value.slice(i))) {
        continue;
      }
    }

    var toBeChecked = !targetIsArray && targetLength > 1 ? value.substr(i, targetLength) : currentChar;

    if (!isInsideString && matchesTarget(toBeChecked)) {

      // If we have a match,
      // and it is inside or outside of a function, as requested in options,
      // send it to the callback
      if (insideFunction && !isInsideFunction) {
        continue;
      }
      if (outsideFunction && isInsideFunction) {
        continue;
      }
      matchFound(i);
      if (options.onlyOne) {
        return;
      }
    }
  }

  function matchFound(i) {
    count++;
    callback(i, count);
  }
};

module.exports = exports["default"];