"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (root, result) {
  result.stylelint = result.stylelint || {};

  var disabledRanges = result.stylelint.disabledRanges = [];

  var withinDisabledRange = false;

  root.walkComments(function (comment) {
    var text = comment.text;

    // Ignore comments that are not relevant commands

    if (text.indexOf(commandPrefix) !== 0) {
      return result;
    }

    if (text.indexOf(disableCommand) === 0) {
      if (withinDisabledRange) {
        comment.error("A new disabled range cannot begin until the previous one has ended");
        return result;
      }
      withinDisabledRange = true;
      var rules = (0, _lodash.compact)(text.slice(disableCommand.length).split(",")).map(function (r) {
        return r.trim();
      });
      startDisabledRange(comment, rules);
    }
    if (text.indexOf(enableCommand) === 0) {
      if (!withinDisabledRange) {
        comment.error("A disabled range cannot end unless it has begun");
        return result;
      }
      withinDisabledRange = false;
      endDisabledRange(comment);
    }
  });

  return result;

  function startDisabledRange(node, rules) {
    var rangeObj = {
      start: node.source.start.line
    };

    if (rules.length) {
      rangeObj.rules = rules;
    }

    disabledRanges.push(rangeObj);
  }

  function endDisabledRange(node) {
    // Add an `end` prop to the last range
    disabledRanges[disabledRanges.length - 1].end = node.source.end.line;
  }
};

var _lodash = require("lodash");

var commandPrefix = "stylelint-";
var disableCommand = commandPrefix + "disable";
var enableCommand = commandPrefix + "enable";

// Run it like a plugin ...