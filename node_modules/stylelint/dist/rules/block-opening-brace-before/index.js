"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _utilsCharNeighbor = require("../../utils/charNeighbor");

var _utilsCharNeighbor2 = _interopRequireDefault(_utilsCharNeighbor);

var ruleName = "block-opening-brace-before";
exports.ruleName = ruleName;
var messages = {
  expected: function expected(w) {
    return "Expected " + (w === "space" ? "single space" : w) + " " + ("before block (" + ruleName + ")");
  } };

exports.messages = messages;
var whitespaceKeywordMap = {
  space: " ",
  newline: "\n" };

/**
 * @param {string} whitespaceKeyword - Whitespace
 *   expected before every block's `{`. One of the
 *   `whitespaceKeywordMap` defined above.
 */

exports["default"] = function (whitespaceKeyword) {
  return function (css, result) {

    // Check both kinds of "block": rules and at-rules
    css.eachRule(checkBlock);
    css.eachAtRule(checkBlock);

    function checkBlock(block) {
      var blockString = block.toString();

      // There should not be whitespace two characters before the `{`
      if (/\s/.test((0, _utilsCharNeighbor2["default"])(blockString, "{", -2))) {
        warn();
        return;
      }

      var expectedChar = whitespaceKeywordMap[whitespaceKeyword];
      var actualChar = (0, _utilsCharNeighbor2["default"])(blockString, "{");
      if (actualChar !== expectedChar) {
        warn();
      }

      function warn() {
        result.warn(messages.expected(whitespaceKeyword), { node: block });
      }
    }
  };
};