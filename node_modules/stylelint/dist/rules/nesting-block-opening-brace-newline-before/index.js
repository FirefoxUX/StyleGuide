"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkNestingBlockOpeningBraceBefore = checkNestingBlockOpeningBraceBefore;

var _utils = require("../../utils");

var ruleName = "nesting-block-opening-brace-newline-before";

exports.ruleName = ruleName;
var messages = (0, _utils.ruleMessages)(ruleName, {
  expectedBefore: function expectedBefore() {
    return "Expected newline before \"{\"";
  },
  expectedBeforeSingleLine: function expectedBeforeSingleLine() {
    return "Expected newline before \"{\" of a single-line nesting block";
  },
  rejectedBeforeSingleLine: function rejectedBeforeSingleLine() {
    return "Unexpected whitespace before \"{\" of a single-line nesting block";
  },
  expectedBeforeMultiLine: function expectedBeforeMultiLine() {
    return "Expected newline before \"{\" of a multi-line nesting block";
  },
  rejectedBeforeMultiLine: function rejectedBeforeMultiLine() {
    return "Unexpected whitespace before \"{\" of a multi-line nesting block";
  }
});

exports.messages = messages;

exports["default"] = function (expectation) {
  return function (root, result) {
    var validOptions = (0, _utils.validateOptions)(result, ruleName, {
      actual: expectation,
      possible: ["always", "always-single-line", "never-single-line", "always-multi-line", "never-multi-line"]
    });
    if (!validOptions) {
      return;
    }

    checkNestingBlockOpeningBraceBefore({
      root: root,
      result: result,
      locationChecker: (0, _utils.whitespaceChecker)("newline", expectation, messages),
      checkedRuleName: ruleName
    });
  };
};

function checkNestingBlockOpeningBraceBefore(_ref) {
  var locationChecker = _ref.locationChecker;
  var root = _ref.root;
  var result = _ref.result;
  var checkedRuleName = _ref.checkedRuleName;

  root.walkRules(function (rule) {
    if (!(0, _utils.cssStatementIsNestingBlock)(rule) || (0, _utils.cssStatementHasEmptyBlock)(rule)) {
      return;
    }

    var beforeBrace = (0, _utils.cssStatementStringBeforeBlock)(rule);
    var lineCheckStr = rule.toString().slice(beforeBrace.length);
    locationChecker.beforeAllowingIndentation({
      lineCheckStr: lineCheckStr,
      source: beforeBrace,
      index: beforeBrace.length,
      err: function err(m) {
        (0, _utils.report)({
          message: m,
          node: rule,
          result: result,
          ruleName: checkedRuleName
        });
      }
    });
  });
}