"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = require("../../utils");

var ruleName = "function-parentheses-inside-space";

exports.ruleName = ruleName;
var messages = (0, _utils.ruleMessages)(ruleName, {
  expectedOpening: "Expected single space before \"(\" of a function",
  rejectedOpening: "Unexpected space before \"(\" of a function",
  expectedClosing: "Expected single space before \")\" of a function",
  rejectedClosing: "Unexpected space before \")\" of a function" });

exports.messages = messages;
/**
 * @param {"always"|"never"} expectation
 */

exports["default"] = function (expectation) {
  return function (css, result) {
    css.eachDecl(function (decl) {
      var value = decl.value;

      (0, _utils.valueIndexOf)({ value: value, char: "(" }, function (index) {
        checkOpening(value, index, decl);
      });
      (0, _utils.valueIndexOf)({ value: value, char: ")" }, function (index) {
        checkClosing(value, index, decl);
      });
    });

    function checkOpening(source, index, node) {
      var nextCharIsSpace = source[index + 1] === " ";
      if (expectation === "always") {
        if (!nextCharIsSpace || (0, _utils.isWhitespace)(source[index + 2])) {
          result.warn(messages.expectedOpening, { node: node });
        }
      } else if (expectation === "never") {
        if (nextCharIsSpace) {
          result.warn(messages.rejectedOpening, { node: node });
        }
      }
    }

    function checkClosing(source, index, node) {
      var prevCharIsSpace = source[index - 1] === " ";
      if (expectation === "always") {
        if (!prevCharIsSpace || (0, _utils.isWhitespace)(source[index - 2])) {
          result.warn(messages.expectedClosing, { node: node });
        }
      } else if (expectation === "never") {
        if (prevCharIsSpace) {
          result.warn(messages.rejectedClosing, { node: node });
        }
      }
    }
  };
};