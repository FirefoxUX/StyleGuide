"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.messages = exports.ruleName = undefined;

exports.default = function (expectation) {
  return function (root, result) {
    var validOptions = (0, _utils.validateOptions)(result, ruleName, {
      actual: expectation,
      possible: ["always", "never"]
    });
    if (!validOptions) {
      return;
    }

    root.walkDecls(function (decl) {
      check(decl.toString(), decl);
    });

    root.walkAtRules(function (atRule) {
      var source = (0, _utils.cssStatementHasBlock)(atRule) ? (0, _utils.cssStatementStringBeforeBlock)(atRule, { noBefore: true }) : atRule.toString();
      check(source, atRule);
    });

    function check(source, node) {
      // Get out quickly if there are no periods
      if (source.indexOf(".") === -1) {
        return;
      }

      var errorIndex = undefined;
      var message = undefined;

      // check leadingzero
      if (expectation === "always") {
        var error = lacksLeadingZero(source);
        if (error) {
          errorIndex = error.index;
          message = messages.expected;
        } else {
          return;
        }
      }
      if (expectation === "never") {
        var error = containsLeadingZero(source);
        if (error) {
          errorIndex = error.index + 1;
          message = messages.rejected;
        } else {
          return;
        }
      }

      (0, _utils.report)({
        message: message,
        node: node,
        index: errorIndex,
        result: result,
        ruleName: ruleName
      });
    }
  };
};

var _utils = require("../../utils");

var ruleName = exports.ruleName = "number-leading-zero";

var messages = exports.messages = (0, _utils.ruleMessages)(ruleName, {
  expected: "Expected a leading zero",
  rejected: "Unexpected leading zero"
});

function lacksLeadingZero(source) {
  return (/(?:\D|^)(\.\d+)/g.exec(source)
  );
}

function containsLeadingZero(source) {
  return (/(?:\D|^)(0\.\d+)/g.exec(source)
  );
}