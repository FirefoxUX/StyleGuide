"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _postcss = require("postcss");

var _postcss2 = _interopRequireDefault(_postcss);

var _multimatch = require("multimatch");

var _multimatch2 = _interopRequireDefault(_multimatch);

var _lodash = require("lodash");

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _utils = require("./utils");

var _rules = require("./rules");

var _rules2 = _interopRequireDefault(_rules);

var _disableRanges = require("./disableRanges");

var _disableRanges2 = _interopRequireDefault(_disableRanges);

var _buildConfig = require("./buildConfig");

var _buildConfig2 = _interopRequireDefault(_buildConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _postcss2.default.plugin("stylelint", function () {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var wasWarned = false;
  function warnForNumberedSeverities(result) {
    if (wasWarned) {
      return;
    }
    wasWarned = true;
    result.warn("Numbered severities (0, 1, 2) have been deprecated, " + "and in 4.0 they will be disabled. ", {
      stylelintType: "deprecation",
      stylelintReference: "http://stylelint.io/?/docs/user-guide/configuration.md"
    });
  }

  return function (root, result) {
    var configPromise = (0, _buildConfig2.default)(options);

    // result.stylelint is the namespace for passing stylelint-related
    // configuration and data across sub-plugins via the PostCSS Result
    result.stylelint = result.stylelint || {};
    result.stylelint.ruleSeverities = {};

    return configPromise.then(function (_ref) {
      var config = _ref.config;
      var configDir = _ref.configDir;

      if (!config) {
        throw (0, _utils.configurationError)("No configuration provided");
      }

      if (!config.rules) {
        throw (0, _utils.configurationError)("No rules found within configuration. Have you used the \"rules\" key?");
      }

      if (config.ignoreFiles) {
        var pathFromConfigToSource = _path2.default.relative(configDir, (0, _lodash.get)(root, "source.input.file", ""));
        if ((0, _multimatch2.default)(pathFromConfigToSource, config.ignoreFiles).length) {
          return;
        }
      }

      if (config.legacyNumberedSeverities) {
        warnForNumberedSeverities(result);
      }

      if (config.plugins) {
        config.plugins.forEach(function (pluginPath) {
          var pluginImport = require(pluginPath);
          // Handle either ES6 or CommonJS modules
          var plugin = pluginImport.default || pluginImport;
          if (!plugin.ruleName) {
            throw (0, _utils.configurationError)("stylelint v3+ requires plugins to expose a ruleName. " + ("The plugin \"" + pluginPath + "\" is not doing this, so will not work ") + "with stylelint v3+. Please file an issue with the plugin to upgrade.");
          }
          _rules2.default[plugin.ruleName] = plugin.rule;
        });
      }

      // Register details about the configuration
      result.stylelint.quiet = config.quiet;

      // First check for disabled ranges, adding them to the result object
      (0, _disableRanges2.default)(root, result);

      Object.keys(config.rules).forEach(function (ruleName) {
        if (!_rules2.default[ruleName]) {
          throw (0, _utils.configurationError)("Undefined rule \"" + ruleName + "\"");
        }

        var rawSettings = config.rules[ruleName];
        var normalizedSettings = normalizeSettings(rawSettings, ruleName);

        // Ignore the rule
        if (normalizedSettings[0] === null) {
          return;
        }

        var ruleSeverity = normalizedSettings[1] && normalizedSettings[1].warn ? "warning" : "error";

        // Log the rule's severity in the PostCSS result
        result.stylelint.ruleSeverities[ruleName] = ruleSeverity;

        // Run the rule with the primary and secondary options
        _rules2.default[ruleName](normalizedSettings[0], normalizedSettings[1])(root, result);
      });
    });
  };
});

// These are rules that accept an array as the primary option

var rulesWithPrimaryOptionArray = new Set(["rule-properties-order", "function-whitelist", "function-blacklist", "property-whitelist", "property-blacklist", "property-unit-whitelist", "property-unit-blacklist", "unit-whitelist", "unit-blacklist"]);

function normalizeSettings(rawSettings, ruleName) {
  // Settings can be
  // a. A solitary primitive value or object, in which case put it in an array
  // b. An array with a primary option and a secondary options object, in which case use that array
  // c. A solitary array ... in which case we have trouble and need to special-case it
  //    ... hence the list above

  if (rulesWithPrimaryOptionArray.has(ruleName)) {
    if (rawSettings !== null && rawSettings.length === 2 && Array.isArray(rawSettings[0]) && (0, _lodash.isPlainObject)(rawSettings[1])) {
      return rawSettings;
    }
    return [rawSettings];
  }

  if (Array.isArray(rawSettings)) {
    return rawSettings;
  }
  return [rawSettings];
}