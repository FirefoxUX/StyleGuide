"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _postcss = require("postcss");

var _postcss2 = _interopRequireDefault(_postcss);

var _rc = require("rc");

var _rc2 = _interopRequireDefault(_rc);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _resolveFrom = require("resolve-from");

var _resolveFrom2 = _interopRequireDefault(_resolveFrom);

var _lodash = require("lodash");

var _utils = require("./utils");

var _rules = require("./rules");

var _rules2 = _interopRequireDefault(_rules);

var _disableRanges = require("./disableRanges");

var _disableRanges2 = _interopRequireDefault(_disableRanges);

exports["default"] = _postcss2["default"].plugin("stylelint", function () {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  return function (root, result) {
    // result.stylelint is the namespace for passing stylelint-related
    // configuration and data across sub-plugins via the PostCSS Result
    result.stylelint = result.stylelint || {};
    result.stylelint.ruleSeverities = {};

    var initialConfig = options.hasOwnProperty("config") ? options.config : options;
    if ((0, _lodash.isEmpty)(initialConfig)) {
      initialConfig = (0, _rc2["default"])("stylelint");
    }

    var configBasedir = options.configBasedir || _path2["default"].dirname(initialConfig.config);
    var config = extendConfig(initialConfig, configBasedir);

    if (config.plugins) {
      Object.keys(config.plugins).forEach(function (pluginName) {
        _rules2["default"][pluginName] = require(modulePath(config.plugins[pluginName], configBasedir));
      });
    }

    if (options.configOverrides) {
      (0, _lodash.merge)(config, options.configOverrides);
    }

    if (!config) {
      throw (0, _utils.configurationError)("No configuration provided");
    }
    if (!config.rules) {
      throw (0, _utils.configurationError)("No rules found within configuration");
    }

    // Register details about the configuration
    result.stylelint.quiet = config.quiet;

    // First check for disabled ranges, adding them to the result object
    (0, _disableRanges2["default"])(root, result);

    Object.keys(config.rules).forEach(function (ruleName) {
      if (!_rules2["default"][ruleName]) {
        throw (0, _utils.configurationError)("Undefined rule " + ruleName);
      }

      // If severity is 0, run nothing
      var ruleSettings = config.rules[ruleName];
      var ruleSeverity = Array.isArray(ruleSettings) ? ruleSettings[0] : ruleSettings;
      if (ruleSeverity === 0) {
        return;
      }

      // Log the rule's severity
      result.stylelint.ruleSeverities[ruleName] = ruleSeverity;

      // Run the rule with the primary and secondary options
      _rules2["default"][ruleName](ruleSettings[1], ruleSettings[2])(root, result);
    });
  };
});

function extendConfig(config, configBasedir) {
  if (!config["extends"]) {
    return config;
  }

  return [].concat(config["extends"]).reduce(function (mergedConfig, extendingConfigLookup) {
    var extendingConfigPath = modulePath(extendingConfigLookup, configBasedir || process.cwd());

    // Now we must recursively extend the extending config
    var extendingConfig = extendConfig(require(extendingConfigPath), _path2["default"].dirname(extendingConfigPath));

    return (0, _lodash.merge)({}, extendingConfig, mergedConfig);
  }, (0, _lodash.cloneDeep)(config));
}

function modulePath(lookup, basedir) {
  try {
    return (0, _resolveFrom2["default"])(basedir, lookup);
  } catch (e) {
    throw (0, _utils.configurationError)("Could not find \"" + lookup + "\". " + "Do you need a `configBasedir`?");
  }
}
module.exports = exports["default"];